<?php
// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use \Codeception\Maybe;
use Codeception\Module\OrderHelper;

/**
 * Inherited methods
 * @method void execute($callable)
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
*/

class OrderGuy extends \Codeception\AbstractGuy
{
    
    /**
     * -> This method is proxified to corresponding module.
     *
     *
     * @see Codeception\Module\OrderHelper::failNow()
     */
    public function failNow() {
        $step = new \Codeception\Step\Action('failNow', func_get_args());
        return $this->scenario->runStep($step);
    }

 
    /**
     * -> This method is proxified to corresponding module.
     *
     *
     * @see Codeception\Module\OrderHelper::writeToFile()
     */
    public function writeToFile($text) {
        $step = new \Codeception\Step\Action('writeToFile', func_get_args());
        return $this->scenario->runStep($step);
    }

 
    /**
     * -> This method is proxified to corresponding module.
     *
     *
     * @see Codeception\Module\OrderHelper::appendToFile()
     */
    public function appendToFile($marker) {
        $step = new \Codeception\Step\Action('appendToFile', func_get_args());
        return $this->scenario->runStep($step);
    }

 
    /**
     * -> This method is proxified to corresponding module.
     *
     *
     * @see Codeception\Module::getName()
     */
    public function getName() {
        $step = new \Codeception\Step\Action('getName', func_get_args());
        return $this->scenario->runStep($step);
    }
}

